xquery version "3.1";

(: Declaración de los namespaces :)
declare namespace rem = "http://rem.lsi.us.es";

(: Visualizar el xml completo que vamos a usar, el documento :)
(:let $r := doc("/db/apps/CBD/REM/Requisitos.xml")/*:)
(:    return $r:)


(: Devuelve los nombres de los stakeholders :)
let $t := doc("/db/apps/CBD/REM/Requisitos.xml") (: se guarda en la variable el documento :)
let $p := $t//element(rem:stakeholder)//element(rem:name) (: Se guarda en la variable el nombre de los stakeholders :)
let $r := distinct-values($p) (: Si hay algun elemento repetido, lo devuelve una sola vez :)
    for $te in $r (: recorre los nombres :)
    order by $te (: Ordena por nombre :)
        return <name>{$te}</name> 

(:(: Dar los nombres de los objetivos :):)
(:for $t in doc("/db/apps/CBD/REM/Requisitos.xml"):)
(:let $e := $t//element(rem:section)[@oid="SEC-0025"]//element(rem:objective)//element(rem:name) (: Recorre el documento y :)
(:busca la seccion que tenga un atributo SEC-0025 dando el nombre del objetivo :):)
(:return:)
(:    <objetivos> {$e} </objetivos>:)
 
(:(: Devuelve aquellos stakeholders que el día de su creacion sea menor o igual a 5 y lo concatena con el nombre q le pertenece y la fecha  :)    :)
(: :)
(: for $b in doc("/db/apps/CBD/REM/Requisitos.xml")//element(rem:stakeholder) (: recorre todos los stakeholders :):)
(: where $b//element(rem:day)<=5 (: dia menor o igual a 5 :):)
(: return <resultado> {concat($b//element(rem:date),"/", $b//element(rem:name))}</resultado> (: da el resultado de la fecha y el nombre, si :)
(: comparamos con el resultado en la consulta de devolver todos los stakeholders, no estan todos :):)
(: :)
 
(:(: Devuelve descripcion,nombre y cuantas son :):)
(:for $b in doc("/db/apps/CBD/REM/Requisitos.xml")//element(rem:section)[@oid="SEC-0037"]:)
(:let $t := $b//element(rem:nonFunctionalRequirement)//element(rem:name):)
(:let $req := $b//element(rem:nonFunctionalRequirement)//element(rem:description):)
(:let $c :=count($t) (: Devuelve la cantidad que existen en esta consulta:):)
(:return:)
(:    <res>:)
(:        <p>{ concat("¿Cuantos requisitos existen en este nodo? : " , $c) } </p> :)
(:    <t>{concat($t[1]," - ", $req[1])}</t> (: Accedemos a la posicion 1 del elemento :):)
(:    </res>:)
(: :)
 
 
(: (: Devuelve matriz asociada :):)
(: for $b in doc("/db/apps/CBD/REM/Requisitos.xml")//element(rem:trace):)
(: let $e := $b/@source (: selecciona el atributo source :):)
(: let $w := $b/@target (: selecciona el atributo target :):)
(: where every $p in $e satisfies contains($p,"IRQ-0004") (: se debe satisfacer que source sea igual IRQ-0004 :):)
(: return <res>{$w}</res> (: devuelve los target que tengan como source IRQ-0004 :):)

(: Devuelve en formato html, los requisitos funcionales, su oid y su nombre :)
(: <html> :)
(:    <head> :)
(:        <title> Requisitos funcionales </title>:)
(:    <body> :)
(:        <table>:)
(:        {:)
(:        for $b in doc("/db/apps/CBD/REM/Requisitos.xml")//element(rem:section)[@oid="SEC-0033"]//element(rem:functionalRequirement):)
(:            return:)
(:        <tr> :)
(:            <td> :)
(:                <I> { string( concat($b/@oid , " - " ,$b//element(rem:name)) ) } </I> :)
(:            :)
(:            </td> :)
(:                :)
(:        </tr> :)
(:        }:)
(:        </table> :)
(:    </body>:)
(:    </head> :)
(:</html> :)